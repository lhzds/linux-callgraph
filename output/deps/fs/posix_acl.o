fs/posix_acl.o
__get_acl -> (posix_acl_release, refcount_warn_saturate, get_cached_acl, kvfree_call_rcu)
__posix_acl_chmod -> (refcount_warn_saturate, kmemdup, kvfree_call_rcu)
__posix_acl_create -> (refcount_warn_saturate, kmemdup, posix_acl_create_masq, kvfree_call_rcu)
do_get_acl -> (refcount_warn_saturate, make_vfsgid, kvfree_call_rcu, make_vfsuid, vfs_get_acl)
do_set_acl -> (posix_acl_from_xattr, refcount_warn_saturate, vfs_set_acl, kvfree_call_rcu)
forget_all_cached_acls -> (refcount_warn_saturate, kvfree_call_rcu)
forget_cached_acl -> (refcount_warn_saturate, kvfree_call_rcu)
get_cached_acl -> (__rcu_read_unlock, refcount_warn_saturate, __rcu_read_lock)
get_inode_acl -> (__get_acl)
posix_acl_alloc -> (__kmalloc)
posix_acl_chmod -> (__posix_acl_chmod, refcount_warn_saturate, __get_acl, kvfree_call_rcu)
posix_acl_clone -> (kmemdup)
posix_acl_create -> (posix_acl_release, refcount_warn_saturate, current_umask, kvfree_call_rcu, __get_acl, posix_acl_create_masq, kmemdup)
posix_acl_from_mode -> (kmalloc_trace)
posix_acl_from_xattr -> (refcount_warn_saturate, __kmalloc, kvfree_call_rcu)
posix_acl_listxattr -> (xattr_list_one)
posix_acl_permission -> (make_vfsuid, vfsgid_in_group_p, make_vfsgid)
posix_acl_release -> (refcount_warn_saturate, kvfree_call_rcu)
posix_acl_update_mode -> (capable_wrt_inode_uidgid, vfsgid_in_group_p, make_vfsgid)
set_cached_acl -> (refcount_warn_saturate, kvfree_call_rcu)
set_posix_acl -> (inode_owner_or_capable)
simple_acl_create -> (refcount_warn_saturate, posix_acl_create, set_cached_acl, kvfree_call_rcu)
simple_set_acl -> (posix_acl_update_mode, set_cached_acl, current_time, inode_maybe_inc_iversion)
vfs_get_acl -> (security_inode_get_acl, __get_acl, strcmp)
vfs_remove_acl -> (down_write, iput, up_write, strcmp, ihold, fsnotify, is_bad_inode, may_write_xattr, __fsnotify_parent, __break_lease, security_inode_remove_acl, inode_owner_or_capable)
vfs_set_acl -> (down_write, set_posix_acl, iput, up_write, strcmp, ihold, security_inode_set_acl, fsnotify, is_bad_inode, may_write_xattr, __fsnotify_parent, __break_lease, from_vfsuid, from_vfsgid)
